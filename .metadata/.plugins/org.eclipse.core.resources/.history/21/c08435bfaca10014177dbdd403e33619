import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;

import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;

import java.util.Arrays;
import java.util.Enumeration;

public class SerialReader implements SerialPortEventListener {
	SerialPort serialPort;
	/** The port we're normally going to use. */
	private static final String PORT_NAMES[] = { 
		//"/dev/tty.usbserial-A9007UX1", // Mac OS X
		//"/dev/ttyUSB0", // Linux
		"COM6"// Windows
	};
	/**
	 * A BufferedReader which will be fed by a InputStreamReader converting the
	 * bytes into characters making the displayed results codepage independent
	 */
	private BufferedReader input;
	/** The output stream to the port */
	@SuppressWarnings("unused") //Remove this suppression when output is necessary
	private OutputStream output;
	/** Milliseconds to block while waiting for port open */
	private static final int TIME_OUT = 2000;
	/** Default bits per second for COM port. */
	//Common baud rates: 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, or 115200
	private static final int DATA_RATE = 14400; //Recommended 19200
	
	private boolean dataReady = false;
	/***********************************************************/
	
	public static final int SENSORCOUNT = 3; //Remember to multiply by 3, since each sensor gives 3 angles
	private float[] data = new float[SENSORCOUNT*3]; //3 values per sensor
	
	public void initialize() {
		CommPortIdentifier portId = null;
		@SuppressWarnings("rawtypes") //Suppresses the unknown Enumeration warning
		Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();

		// First, Find an instance of serial port as set in PORT_NAMES.
		while (portEnum.hasMoreElements()) {
			CommPortIdentifier currPortId = (CommPortIdentifier) portEnum
					.nextElement();
			for (String portName : PORT_NAMES) {
				if (currPortId.getName().equals(portName)) {
					portId = currPortId;
					break;
				}
			}
		}
		System.out.println("Port ID: " + portId);
		if (portId == null) {
			System.out.println("Could not find COM port.");
			return;
		}

		try {
			// open serial port, and use class name for the appName.
			serialPort = (SerialPort) portId.open(this.getClass().getName(),
					TIME_OUT);

			// set port parameters
			serialPort.setSerialPortParams(DATA_RATE, SerialPort.DATABITS_8,
					SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);

			// open the streams
			input = new BufferedReader(new InputStreamReader(
					serialPort.getInputStream()));
			output = serialPort.getOutputStream();

			// add event listeners
			serialPort.addEventListener(this);
			serialPort.notifyOnDataAvailable(true);
		} catch (Exception e) {
			System.err.println(e.toString());
		}
	}

	/**
	 * This should be called when you stop using the port. This will prevent
	 * port locking on platforms like Linux.
	 */
	public synchronized void close() {
		if (serialPort != null) {
			serialPort.removeEventListener();
			serialPort.close();
		}
	}

	/**
	 * Handle an event on the serial port. Read the data and print it.
	 */
	public synchronized void serialEvent(SerialPortEvent oEvent) {
		dataReady = false;
		if (oEvent.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
			try {
				String in = input.readLine();
				//System.out.println(in);
				String[] strData = in.split(",");
				try {
					for (int i = 0; i < strData.length; i++)
						data[i] = Float.valueOf(strData[i]);
					dataReady = true;
				} catch (Exception e){
					System.err.println("Parse Fail - " + in + " : " + e.toString());
					for (int i = 0; i < data.length; i++)
						data[i] = 0.0f;
				}
			} catch (Exception e) {
				System.err.println("Read & Split Fail: " + e.toString());
				for (int i = 0; i < data.length; i++)
					data[i] = 0.0f;
			}
		}
		// Ignore all the other eventTypes, but you should consider the other
		// ones.
	}
	
	public synchronized float[] read(){
		if (dataReady == true){
			dataReady = false;
			return data;
		}
		else{
			System.err.println("DATA NOT READY!!!");
			float[] zeros = new float[SENSORCOUNT*3];
			Arrays.fill(zeros, 0.0f);
			return zeros;
		}
	}
	
	public synchronized boolean isReady(){
		return dataReady;
	}
}