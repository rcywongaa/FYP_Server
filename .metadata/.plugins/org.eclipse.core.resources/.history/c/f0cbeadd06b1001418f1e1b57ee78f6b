import java.util.HashMap;
import java.util.Map;

import com.jogamp.opengl.math.VectorUtil;

/*
 */
public class Keyboard {
	public static final float MARGIN = 1.0f; //Hand.FINGERWIDTH / Hand.SCALE;
	/*
	 * Positions relative to J key (0, 0)
	 * In centimeters
	 */
	public final float[] JREL = {0, 0};
	public final float[] UREL = {-0.5f, MARGIN * 2};
	public final float[] MREL = {0.5f, -MARGIN * 2};
	public final float[] HREL = {-MARGIN * 2, 0};
	public final float[] YREL = {UREL[0] - MARGIN * 2, UREL[1]};
	public final float[] NREL = {MREL[0] - MARGIN * 2, MREL[1]};
	
	private HashMap<Character, float[]> keyboard = new HashMap<Character, float[]>();
	private boolean isInit = false;
	
	public Keyboard(){
		keyboard.put('Y', YREL);
		keyboard.put('U', UREL);
		keyboard.put('H', HREL);
		keyboard.put('J', JREL);
		keyboard.put('N', NREL);
		keyboard.put('M', MREL);
	}
	
	public void initJPos(float[] jPos){
		assert jPos.length == 2  : "initJPos() bad input!";
		assert isInit == false : "Re-Initiation!";
		
		for (Character c : keyboard.keySet()){
			keyboard.put(c, VectorUtil.addVec2(new float[2], keyboard.get(c), jPos)); 
		}
		isInit = true;
	}
	
	public char getKey(float[] pos){
		assert isInit == true : "Not initialized yet!";
		assert pos.length == 2 : "getKey() bad input!";
		for (Character c : keyboard.keySet()){
			float[] keyPos = keyboard.get(c);
			if (Math.abs(keyPos[0] - pos[0]) < MARGIN && Math.abs(keyPos[1] - pos[1]) < MARGIN ){
				System.out.println(c);
				return c;
			}
		}
		//System.out.println('?');
		return '?';
	}
	
	public boolean isInit(){
		return isInit;
	}
}
