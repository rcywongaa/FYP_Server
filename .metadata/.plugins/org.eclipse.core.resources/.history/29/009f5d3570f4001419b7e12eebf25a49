package main;

import java.awt.AWTException;
import java.util.LinkedList;
import java.util.List;

import HandModel.KeyboardCreator;
import response.responseControl;
import fxml.controller_collections;
import fxml.fxml_main_controller;
import fxml.fxml_monitor;
import fxml.model_controller;

public class DataProcessControl {
	final private int memory_size = 100;
	final private int leftclick_finger = 2;
	final private int rightclick_finger = 3;
	final private int holdclick_finger = 4;
	final private int cursor_finger = 0;
	private clickEvent click;
	Memory my_memory = null;
	CursorControl myCursorControl;
	private controller_collections my_controllers = new controller_collections();
	private responseControl RC = new responseControl();
	private data datas = new data(memory_size);
	private boolean Memory_modified = true;
	private int yaws_calibrate = 0;
	public static boolean lock = false;
	private boolean lock2 = false;
	private KeyboardCreator keyboard = new KeyboardCreator();
	public boolean keyboard_init_ready = false;
	private int state = 0;
	public boolean isStart=false;
	public DataProcessControl() throws AWTException {
		myCursorControl = new CursorControl(cursor_finger);
		click = new clickEvent(leftclick_finger, rightclick_finger,
				holdclick_finger);

	}

	public responseControl getRC() {
		return RC;
	}

	public data get_my_datas() {
		return datas;
	}

	public controller_collections get_my_controller() {
		return my_controllers;
	}

	public void ProcessData(LinkedList<Float> Datas) throws AWTException {

		if (yaws_calibrate == 1 && datas.getInitialYaws() == null) {
			datas.setInitialYaws(Datas);
		}
		List<Float> Datas_right = Datas.subList(0, Datas.size() / 2);
		// List<Float> Datas_left = Datas.subList(Datas.size() / 2,
		// Datas.size());

		// System.out.println("Datas_right: " + Datas_right);
		// System.out.println("Datas_left: " + Datas_left);
		// for (Gesture g :
		// MemoryControl.LoadFromFile_ChangeGesture().my_gesture) {
		// System.out.println(g.name);
		// }

		/* Check the Change State Gesture */
		if (my_memory != null) {
			if (datas.getNewestDataRelative() != null) {
				similarityControl.SpecialcheckGesture(
						MemoryControl.LoadFromFile_ChangeGesture(),
						datas.getNewestDataRelative());
			}
		}
		/***********************************/

		datas.addToMemory(Datas);

		MemoryControl control = new MemoryControl();
		if (lock == false && Memory_modified == true) {
			my_memory = control.LoadFromFile();
			set_modified(false);
			if (similarityControl.thread != null)
				similarityControl.interrupt();
		}

		// if (MainActivity.my_model_controller != null) {
		// MainActivity.my_model_controller.set_sensors_reading(Datas);
		// }

		/***** state1 ******/
		if (state == 1) {
			 //TODO:
			 if (!keyboard.isCreated()&&keyboard_init_ready){
			 keyboard.create(ConnectionCreator.getReader());
			 }
		}
		/***** state1 ******/

		/***** state2 ******/
		/* cursor */
		if (state == 2)
			if (!lock2) {
				lock2 = true;
				click.checkClick(datas.getMemory());
				CursorControl.setCursorPosition(Datas_right);
				lock2 = false;
			}
		/* cursor */

		/* gesture */
		if (my_memory != null) {
			if (datas.getNewestDataRelative_Left() != null) {
				similarityControl.checkGesture(my_memory,
						datas.getNewestDataRelative_Left());
			}

		}
		/* gesture */

		/****************/

	}

	public static void lock_off() {
		lock = false;
	}

	public static void lock_on() {
		lock = true;
	}

	public void start_yaws_calibrate() {
		yaws_calibrate = 1;
	}

	public void set_modified(boolean bo) {
		Memory_modified = bo;
	}

	public int getState() {
		return state;
	}

	public void changeState(int x) {
		if(!isStart)return;
		if (x == 0) {
			stopKeyBoard();
			state = 0;
			if (my_controllers.get_my_start() != null)
				my_controllers.get_my_start().changeMode(0);
		} else if (x == 1) {
			state = 1;
			if (my_controllers.get_my_start() != null)

				my_controllers.get_my_start().changeMode(1);

		} else {
			stopKeyBoard();
			state = 2;
			if (my_controllers.get_my_start() != null);
				my_controllers.get_my_start().changeMode(2);

		}

	}
	public void setState(int x){state=x;}
	
	public void stopKeyBoard() {
		keyboard.destroy();
	}
}
