import java.util.Map;

import com.jogamp.opengl.math.VectorUtil;

/*
 */
public class Keyboard {
	private boolean isInit = false;
	private final float BORDER = 2.5f; //Hand.FINGERWIDTH / Hand.SCALE;
	private final char[] keySeq = {'Y', 'U', 'H', 'J', 'N', 'M'};
	private Map<Character, KeyButton> keyboard;
	/*
	 * Positions relative to J key (0, 0)
	 * In centimeters
	 */
	private final float[] JREL = {0, 0};
	private final float[] UREL = {-0.5f, BORDER};
	private final float[] MREL = {0.5f, -BORDER};
	private final float[] HREL = {-BORDER, 0};
	private final float[] YREL = {UREL[0] - BORDER, UREL[1]};
	private final float[] NREL = {MREL[0] - BORDER, MREL[1]};
	private final float[][] RELPOS = {JREL, UREL, MREL, HREL, YREL, NREL};
	
	public Keyboard(){
		for (int i = 0; i < keySeq.length; i++){
			keyboard[i] = new KeyButton()
		}
	}
	
	public void initJPos(float[] jPos){
		assert jPos.length == 2  : "initJPos() bad input!";
		assert isInit == false : "Re-Initiation!";
		for (int i = 0; i < KEYNO; i++){
			VectorUtil.addVec2(keyPos[i], keyPos[i], jPos);
		}
		isInit = true;
	}
	
	public char getKey(float[] pos){
		assert isInit == true : "Not initialized yet!";
		assert pos.length == 2 : "getKey() bad input!";
		for (int i = 0; i < KEYNO; i++){
			if (Math.abs(keyPos[i][0] - pos[0]) < BORDER && Math.abs(keyPos[i][1] - pos[1]) < BORDER ){
				System.out.println(keyChar[i]);
				return keyChar[i];
			}
		}
		//System.out.println('?');
		return '?';
	}
	
	public boolean isInit(){
		return isInit;
	}
}
