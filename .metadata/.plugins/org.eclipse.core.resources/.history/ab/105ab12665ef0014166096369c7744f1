package main;

import java.awt.Robot;
import java.util.LinkedList;

import response.filter;
import response.responseControl;

public class similarityControl {
	private static double SD = 0.2;
	public static Thread thread;

	public static void checkGesture(Memory my_memory, LinkedList<Float> Datas) {
		if (my_memory != null) {

			for (Gesture gestures : my_memory.getMyGesture()) {
				
				check_gesture_match(gestures, Datas);

			}
		}

	}

	public static void check_gesture_match(Gesture gest, LinkedList<Float> data) {

		LinkedList<LinkedList<Float>> separate_list_gesture = new LinkedList<LinkedList<Float>>();
		LinkedList<LinkedList<Float>> separate_list_data = new LinkedList<LinkedList<Float>>();

		for (int i = 0; i < gest.GetData().size(); i = i + 3) {
			separate_list_gesture.addLast(get_subset_of_linkedlist(
					gest.GetData(), i, i + 2));
			separate_list_data
					.addLast(get_subset_of_linkedlist(data, i, i + 2));

		}
		double total = 0;
		for (int i = 0; i < separate_list_gesture.size()
				&& i < separate_list_data.size(); i++) {
			total += check_similarity(separate_list_gesture.get(i),
					separate_list_data.get(i), gest);
		}
		if (total > 0.5 * 3 * 5) {
			if (main.get_the_control().getRC().getGest() == null) {
				main.get_the_control().getRC().setGest(gest, total);
				main.get_the_control().getRC().setStop(false);
				thread = new Thread(main.get_the_control().getRC());
				thread.start();

			}


		} else {
			if (thread != null
					&& main.get_the_control().getRC().getGest() != null
					&& main.get_the_control().getRC().getGest().GetName()
							.equals(gest.GetName())) {
				thread.interrupt();
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				main.get_the_control().getRC().setGest(null, 0);
			}
		}
	}

	public static LinkedList<Float> get_subset_of_linkedlist(
			LinkedList<Float> data, int start, int end) {
		LinkedList<Float> rt_list = new LinkedList<Float>();
		if (data.size() < end) {
			return null;
		}
		for (int i = start; i <= end; i++) {
			rt_list.addLast(data.get(i));

		}
		return rt_list;
	}

	public static double check_similarity(LinkedList<Float> data1,
			LinkedList<Float> data2, Gesture gest) {
		double success_value = 0.3;

		double difference1 = abs(data1.get(0) - data2.get(0));
		if (difference1 > Math.PI) {
			difference1 = Math.PI * 2 - difference1;
		}
		double difference3 = abs(data1.get(2) - data2.get(2));
		if (difference1 > Math.PI) {
			difference3 = Math.PI * 2 - difference3;
		}
		double difference2 = (abs(data1.get(1) - data2.get(1)));
		double totalDifference = difference1 + difference2 + difference3;

		// double score1=triangleFilter(0.5,Math.PI-difference1);
		// double score2=triangleFilter(0.5,Math.PI-difference2);
		// double score3=triangleFilter(0.5,Math.PI-difference3);

		double score1 = filter.GaussianFilter(difference1, SD);
		double score2 = filter.GaussianFilter(difference2, SD);
		double score3 = filter.GaussianFilter(difference3, SD);

		double totalscore = score1 + score2 + score3;

		return totalscore;


	}
	public static void interrupt()
	{
		thread.interrupt();

	}

	private static double abs(float f) {
		// TODO Auto-generated method stub
		if (f < 0) {
			f = f * -1;
		}

		return f;
	}

}
