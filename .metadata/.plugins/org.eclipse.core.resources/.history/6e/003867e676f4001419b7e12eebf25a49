import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import javax.swing.JFrame;
 
/*
 * TODO: Implement Kalman / Comlplementary filter
 * TODO: Handle unlikely finger initiations
 * 
 * Procedures:
 * 1: Initialize forward position of all fingers
 * 2: Initialize J, K, L, ; positions (right hand)
 * 
 * NOTE: Size of raw data = (3 Axis * 3 Sensors * SENSORCOUNT * 32bit float) 
 * NOTE: Keyboard.FINGERNO (excludes palm) != Hand.FINGERNO (includes palm)
 */

public class KeyboardCreator 
{
	public static final int READRATE = 20; //ms
	public final static int RIGHT = 0;
	public final static int LEFT = 1;
	private final static ScheduledExecutorService SCHEDULER = Executors.newScheduledThreadPool(1);
	private final static Rectangle screenBounds = GraphicsEnvironment.getLocalGraphicsEnvironment().
    		getMaximumWindowBounds();
	private static JFrame rHandFrame = null;
	private static JFrame lHandFrame = null;
	private static JFrame keyboardFrame = null;
	private static CommReader reader[] = null;
	public static ReadRunnable readRunner = null;
	private static Renderer renderer[] = null;
	private static Keyboard keyboard = null;
	private static ScheduledFuture<?> scheduledEvent;
	
    public void create(CommReader reader[]) 
    {
    	KeyboardCreator.reader = reader;
    	//System.arraycopy(reader, 0, KeyboardCreator.reader, 0, reader.length);
    	if (MainActivity.HASLEFT){
    		renderer = new Renderer[2];
   			renderer[RIGHT] = new Renderer();
   			renderer[LEFT] = new Renderer();
    	} else {
    		renderer = new Renderer[1];
    		renderer[RIGHT] = new Renderer();
    	}
    	
    	readRunner = new ReadRunnable();
        
        rHandFrame = new JFrame( "Right Hand Model" );
        rHandFrame.getContentPane().add( renderer[RIGHT].getCanvas());
        rHandFrame.setSize( rHandFrame.getContentPane().getPreferredSize() );
        rHandFrame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent ev) {
            	System.out.println("Closing...");
            	destroy();
            }
        });
        rHandFrame.setLocation((int)screenBounds.getMaxX() - rHandFrame.getWidth(), 0);
        rHandFrame.setVisible( true );
        
        if (MainActivity.HASLEFT){
        	lHandFrame = new JFrame( "Left Hand Model" );
			lHandFrame.getContentPane().add( renderer[LEFT].getCanvas());
			lHandFrame.setSize( lHandFrame.getContentPane().getPreferredSize() );
			lHandFrame.addWindowListener(new WindowAdapter() {
				public void windowClosing(WindowEvent ev) {
					destroy();
	            	System.out.println("Closing...");
				}
			});
			lHandFrame.setVisible( true );
        }
        
        for (int i = 0; i < reader.length; i++){ //Ensure reader has begun receiving valid data
        	while (!reader[i].isReady());
        	reader[i].write(MainActivity.KEYBOARDMODE); //Tells Arduino to run in Keyboard Mode
        }
        
        try {
        	Thread.sleep(5000);
        } catch (InterruptedException e){
        	System.err.println("Unwanted Interrupt!");
        }
        
        System.out.println("Initializing right hand forward...");
        while (renderer[RIGHT].getHand().isInit() == false){
        	DataSet data = getData(RIGHT);
        	renderer[RIGHT].getHand().initRadAngles(RIGHT, data.getAngles());
			try {
				Thread.sleep(READRATE);
			} catch (InterruptedException e) {
				System.out.println("initRadAngles() sleep fail!");
				e.printStackTrace();
			}
        }
        
        if (MainActivity.HASLEFT){
            System.out.println("Initializing left hand forward...");
        	 while (renderer[LEFT].getHand().isInit() == false){
             	DataSet data = getData(LEFT);
             	renderer[LEFT].getHand().initRadAngles(LEFT, data.getAngles());
     			try {
     				Thread.sleep(READRATE);
     			} catch (InterruptedException e) {
     				System.out.println("initRadAngles() sleep fail!");
     				e.printStackTrace();
     			}
             }
    	}
        
        while (keyboard == null || keyboard.isInit() == false){
        	if (!MainActivity.HASLEFT){
        		System.out.println("Initializing 'J', 'K', 'L', ';' positions...");
        		DataSet data = getData(RIGHT);
        		renderer[RIGHT].getHand().setRadAngles(data.getAngles());
        		keyboard = new Keyboard(renderer[RIGHT].getHand().getXYCoord(), null);
        	}
        	else {
        		System.out.println("Initializing 'F', 'D', 'S', 'A' and 'J', 'K', 'L', ';'positions...");
        		DataSet rData = getData(RIGHT);
            	DataSet lData = getData(LEFT);
            	renderer[RIGHT].getHand().setRadAngles(rData.getAngles());
            	renderer[LEFT].getHand().setRadAngles(lData.getAngles());
            	keyboard = new Keyboard(renderer[RIGHT].getHand().getXYCoord(), renderer[LEFT].getHand().getXYCoord());
        	}
        	try {
				Thread.sleep(READRATE);
			} catch (InterruptedException e) {
				System.out.println("Keyboard() sleep fail!");
				e.printStackTrace();
			}
        }
        
        System.out.println("Initialization complete!");

        scheduledEvent = SCHEDULER.scheduleAtFixedRate(readRunner, 1000, READRATE, TimeUnit.MILLISECONDS);

        keyboardFrame = new JFrame("Keyboard View");
        keyboardFrame.setUndecorated(true);
		keyboardFrame.getContentPane().add(keyboard.getView());
		keyboardFrame.pack();
        keyboardFrame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent ev) {
                System.exit(0);
            }
        });
        keyboardFrame.setResizable(false);
        keyboardFrame.setLocation((int)screenBounds.getMaxX() /2 - keyboardFrame.getSize().width / 2,
        		(int)screenBounds.getMaxY() - keyboardFrame.getSize().height);
        keyboardFrame.setVisible(true);
    }

    public static DataSet getData(int i){
    	assert i == RIGHT || (MainActivity.HASLEFT && i == LEFT) : "getData() bad input!";
    	//while (!reader[i].isReady());
    	return reader[i].read();
    }
    
    public static class ReadRunnable implements Runnable {
    	public void run(){
			DataSet rData = reader[RIGHT].read();
			renderer[RIGHT].getHand().setRadAngles(rData.getAngles());
			renderer[RIGHT].getHand().setPalmPos(rData.getPalmPos());
			float[][] rFingerPos = new float[Keyboard.FINGERNO][2];
			for (int i = Keyboard.THUMB; i < Keyboard.FINGERNO; i++){
				rFingerPos[i] = renderer[RIGHT].getHand().getXYCoord(i + 1); //due to inconsistent finger indices
			}
			
			//else System.out.println("Redundant reads...");
			
			if (MainActivity.HASLEFT){
				DataSet lData = reader[LEFT].read();
				renderer[LEFT].getHand().setRadAngles(lData.getAngles());
				renderer[LEFT].getHand().setPalmPos(lData.getPalmPos());
				float[][] lFingerPos = new float[Keyboard.FINGERNO][2];
				for (int i = Keyboard.THUMB; i < Keyboard.FINGERNO; i++){
					lFingerPos[i] = renderer[LEFT].getHand().getXYCoord(i + 1);
				}
				keyboard.getView().setPos(rFingerPos, lFingerPos);
				keyboard.getView().setTap(rData.getTaps(), lData.getTaps());
			}
			else {
				keyboard.getView().setPos(rFingerPos, null);
				keyboard.getView().setTap(rData.getTaps(), null);
			}
		}
    }
    
    public void destroy(){
    	scheduledEvent.cancel(false);
    	if (rHandFrame != null) rHandFrame.dispose();
    	rHandFrame = null;
    	if (lHandFrame != null) lHandFrame.dispose();
    	lHandFrame = null;
    	if (keyboardFrame != null) keyboardFrame.dispose();
    	keyboard.close();
    	keyboard = null;
    	reader = null;
    }
    
    public boolean isCreated(){
    	if (keyboard == null)
    		return false;
    	else
    		return true;
    }
}