import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import javax.swing.JFrame;
 
/*
 * Probably not a good idea to send so much raw data (3 Axis * 3 Sensors * FINGERNO * sizeof(float))
 */

public class MainActivity 
{
	public static final int SENSORCOUNT = 5;
	static SerialReader reader;
	static Renderer renderer;
	static Keyboard keyboard;
	final static ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    public static void main(String[] args) 
    {
    	reader = new SerialReader();
    	renderer = new Renderer();
    	keyboard = new Keyboard();
    	 
        JFrame handFrame = new JFrame( "Hand Model" );
        handFrame.getContentPane().add( renderer.getCanvas());
        handFrame.setSize( handFrame.getContentPane().getPreferredSize() );
        handFrame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent ev) {
            	reader.close();
                System.exit(0);
            }
        });
        handFrame.setVisible( true );

        JFrame keyboardFrame = new JFrame("Keyboard View");
        keyboardFrame.setUndecorated(true);
		keyboardFrame.getContentPane().add(keyboard.getView());
		keyboardFrame.pack();
        keyboardFrame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent ev) {
                System.exit(0);
            }
        });
        keyboardFrame.setResizable(false);
        keyboardFrame.setVisible(true);
        
        reader.initialize();
        
        scheduleReader();
        
    }
    
    public static void scheduleReader() {
    	final Runnable readRunner = new Runnable(){
    		public void run(){
    			if (reader.isReady()){
    				float[] data = reader.read();
    				if (renderer.getHand().isInit() == false){
    					System.out.println("Initializing J Position");
    					renderer.getHand().initRadAngles(Hand.Side.RIGHT, data);
    				}
    				else {
    					renderer.getHand().setRadAngles(data);
    					if (keyboard.isInit() == false){
    						keyboard.initJPos(renderer.getHand().getXYCoord(Hand.INDEX));
    					}
    					else {
    						keyboard.getKey(renderer.getHand().getXYCoord(Hand.INDEX));
    					}
    				}
    			}
    			//System.out.println("Periodic Event");
    		}
    	};
    	scheduler.scheduleAtFixedRate(readRunner, 1000, 1, TimeUnit.MILLISECONDS);
    }
}