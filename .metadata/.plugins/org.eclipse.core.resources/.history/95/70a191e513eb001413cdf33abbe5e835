import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import javax.swing.JPanel;
import javax.swing.Timer;

import com.jogamp.opengl.math.VectorUtil;

/*
 * TODO: Support 2 hands
 * TODO: Thumb
 * 
 * NOTE: Using inconsistent finger numbering was a bad idea...
 */
public class Keyboard {
	public static final int THUMB = 0;
	public static final int INDEX = 1;
	public static final int MIDDLE = 2;
	public static final int RING = 3;
	public static final int LITTLE = 4;
	public static final int FINGERNO = 5;
	private float OFFSETSCALE = 0.4f; //x-offset scale between rows
	private float margin = 0; //Hand.FINGERWIDTH / Hand.SCALE;
	private float rowOffset = 0;
	/*
	 * Positions relative to J key (0, 0), 
	 * +X: Right, +Y: Up
	 * In centimeters
	 */
	private final char[] KEYSEQ = {
			'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P',
			'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L',
			'Z', 'X', 'C', 'V', 'B', 'N', 'M'
	};
	private final int KEYNO = KEYSEQ.length;
	private float[][] KEYPOS = new float[KEYNO][2];  //Center position of key
	private final int JINDEX = 16;
	private final int UINDEX = 6;
	private final int MINDEX = 25;
	
	private HashMap<Character, float[]> keyboard = new HashMap<Character, float[]>();
	private boolean isInit = false;
	private float[][] rInitFingerPos = new float[FINGERNO][2];
	private float[][] lInitFingerPos = new float[FINGERNO][2];
	private float[] rHandOffset = new float[2];
	private float[] lHandOffset = new float[2];
	private ArrayList<float[]> worldPos = new ArrayList<float[]>(MainActivity.HASLEFT ? FINGERNO * 2 : FINGERNO); //in cm //FIXME: Two Hands!!
	private KeyboardView view;
	
	/*
	 * NOTE: Input 2D coords of 6 fingers (including palm)
	 */	
	public Keyboard(float[][] rInitPos6, float[][] lInitPos6){
		assert rInitPos6[0].length == 2 && rInitPos6.length == Hand.FINGERNO : "Keyboard() bad input!";
		
		for (int i = 0; i < rInitFingerPos.length; i++){
			System.arraycopy(rInitPos6[i+1], 0, rInitFingerPos[i], 0, rInitFingerPos[i].length);
		}
		
		if (MainActivity.HASLEFT == false)		
			initMargin(rInitFingerPos);
		else{
			assert lInitPos6[0].length == 2 && lInitPos6.length == Hand.FINGERNO : "Keyboard() bad input!";
			for (int i = 0; i < lInitFingerPos.length; i++){
				System.arraycopy(lInitPos6[i+1], 0, lInitFingerPos[i], 0, lInitFingerPos[i].length);
			}
			initMargin(rInitFingerPos, lInitFingerPos);
		}
		
		rowOffset = OFFSETSCALE * margin;
		for (int i = 0; i < KEYNO; i++){
			if (i < 10){ //First row
				KEYPOS[i][0] = (-rowOffset - (UINDEX - i)) * 2 * margin;
				KEYPOS[i][1] = margin * 2;
			}
			else if (i < 19){ //Second row
				KEYPOS[i][0] = - (JINDEX - i) * 2 * margin;
				KEYPOS[i][1] = 0;
			}
			else {
				KEYPOS[i][0] = (rowOffset - (MINDEX - i)) * 2 * margin;
				KEYPOS[i][1] = -margin * 2;
			}
			keyboard.put(KEYSEQ[i], KEYPOS[i]);
		}
		
		System.out.println("J Location: " + Arrays.toString(keyboard.get('J')));
		System.out.println("F Location: " + Arrays.toString(keyboard.get('F')));
		
		if (MainActivity.HASLEFT == false)
			initJPos(rInitFingerPos[INDEX]);
		else
			initJFPos(rInitFingerPos[INDEX], lInitFingerPos[INDEX]);
		
		view = new KeyboardView(); //Only create view after initialization
		isInit = true;
	}
	
	public float initMargin(float[][] pos){
		assert pos.length == FINGERNO && pos[0].length == 2 : "initMargin() bad input!";
		assert isInit == false : "Re-Initialization";
		margin = (Math.abs(pos[INDEX][0] - pos[MIDDLE][0]) / 2 + Math.abs(pos[MIDDLE][0] - pos[RING][0]) / 2 + 
				Math.abs(pos[RING][0] - pos[LITTLE][0]) / 2) / 3;
		System.out.println("Key margin: " + margin);
		return margin;
	}
	
	public float initMargin(float[][]rPos, float[][]lPos){
		assert rPos.length == FINGERNO && lPos.length == FINGERNO &&
				rPos[0].length == 2 && lPos[0].length == 2 : "initMargin() bad input!";
		float rMargin = initMargin(rPos);
		float lMargin = initMargin(lPos);
		margin = (rMargin + lMargin) / 2;
		return margin;
	}
	
	public boolean initJPos(float[] jPos){
		assert jPos.length == 2  : "initJPos() bad input!";
		assert isInit == false : "Re-Initialization!";
		
		rHandOffset[0] =  keyboard.get('J')[0] - jPos[0];
		rHandOffset[1] =  keyboard.get('J')[1] - jPos[1];
		
		return true;
	}
	
	public boolean initJFPos(float[] jPos, float[] fPos){
		assert jPos.length == 2 && fPos.length == 2  : "initJPos() bad input!";
		assert isInit == false : "Re-Initialization!";
		
		rHandOffset[0] =  keyboard.get('J')[0] - jPos[0];
		rHandOffset[1] =  keyboard.get('J')[1] - jPos[1];
		
		lHandOffset[0] = keyboard.get('F')[0] - fPos[0];
		lHandOffset[1] = keyboard.get('F')[1] - fPos[1];
		return true;
	}
	
	//Input: 2D world coordinates
	public char getKey(float[] pos, boolean isRight){
		assert isInit == true : "Not initialized yet!";
		assert pos.length == 2 : "getKey() bad input!";
		if (isRight)
			VectorUtil.addVec2(pos, pos, rHandOffset);
		else
			VectorUtil.addVec2(pos, pos, lHandOffset);
		return getKey(pos);
	}
	
	//Input: 2D coordinates relative to J key (0, 0)
	public char getKey(float[] pos){
		assert isInit == true : "Not initialized yet!";
		assert pos.length == 2 : "getKey() bad input!";
		
		for (Character c : keyboard.keySet()){
			float[] keyPos = keyboard.get(c);
			if (Math.abs(keyPos[0] - pos[0]) < margin && Math.abs(keyPos[1] - pos[1]) < margin ){
				return c;
			}
		}
		return '?';
	}
	
	public boolean isInit(){
		return isInit;
	}
	
	public KeyboardView getView(){
		return view;
	}
	
	
	/*
	 * NOTE: All units are in pixels here
	 */
	@SuppressWarnings("serial")
	class KeyboardView extends JPanel implements ActionListener{
		private final int REFRATE = 20; //ms
		private final int RADIUS = 10;
		private final int RATIO = 35; //cm to pixel ratio
		private int KEYWIDTH = Math.round(2 * margin * RATIO);
		/*
		 *  Relative to upper left corner of Q key (0, 0)
		 *  +X: Right, +Y: Down
		 *  in pixels
		 */
		private final int[][] KEYPOS = new int[KEYNO][2]; 

		private int width = 10 * KEYWIDTH;
		private int height = 3 * KEYWIDTH;
		private ArrayList<int[]> screenPos = new ArrayList<int[]>(MainActivity.HASLEFT ? FINGERNO * 2 : FINGERNO); //in pixels
		private Timer timer;
		private ArrayList<Character> currKey = new ArrayList<Character>();
		private boolean[] taps = new boolean[MainActivity.HASLEFT ? FINGERNO * 2 : FINGERNO];
		
		public KeyboardView(){
			for (int i = 0; i < KEYNO; i++){
				if (i < 10){ //First row
					KEYPOS[i][0] = i * KEYWIDTH;
					KEYPOS[i][1] = 0;
				}
				else if (i < 19){ //Second row
					KEYPOS[i][0] = Math.round((i - 10 + rowOffset) * KEYWIDTH);
					KEYPOS[i][1] = KEYWIDTH * 1;
				}
				else {
					KEYPOS[i][0] = Math.round((i - 19 + 2 * rowOffset) * KEYWIDTH);
					KEYPOS[i][1] = KEYWIDTH * 2;
				}
			}
			setSize(new Dimension(width, height));
			setPreferredSize(new Dimension(width, height));
			setBackground(Color.BLACK);
	        timer = new Timer(REFRATE, this);
	        timer.start();
		}
		
		//Input world 2D coordinates
		public void setPos(float[][] rPos, float[][] lPos){
			assert rPos.length == FINGERNO : "setPos() bad input!";
			assert rPos[0].length == 2 : "setPos() bad input!";
			
			//Ensures starting finger positions are y-aligned
			for (int finger = MIDDLE; finger < FINGERNO; finger++){
				rPos[finger][1] -= rInitFingerPos[finger][1] - rInitFingerPos[INDEX][1];
			}
			if (lPos != null){
				for (int finger = MIDDLE; finger < FINGERNO; finger++){
					rPos[finger][1] -= lInitFingerPos[finger][1] - lInitFingerPos[INDEX][1]; 	
				}
			}
			
			currKey.clear();
			worldPos.clear();
			screenPos.clear();
			
			for (int i = 0; i < rPos.length; i++){
				VectorUtil.addVec2(rPos[i], rPos[i], rHandOffset);				
				worldPos.add(rPos[i]);
				int[] sPos = new int[2];
				sPos[0] = Math.round(rPos[i][0] * RATIO) + KEYPOS[JINDEX][0] + KEYWIDTH / 2; //KEYPOS is upper left corner
				sPos[1] = -Math.round(rPos[i][1] * RATIO) + KEYPOS[JINDEX][1] + KEYWIDTH / 2;
				screenPos.add(sPos);
				currKey.add(getKey(rPos[i]));
			}
			
			for (int i = 0; lPos != null && i < lPos.length; i++){
				VectorUtil.addVec2(lPos[i], lPos[i], lHandOffset);
				worldPos.add(lPos[i]);
				int[] sPos = new int[2];
				sPos[0] = Math.round(lPos[i][0] * RATIO) + KEYPOS[JINDEX][0] + KEYWIDTH / 2; //KEYPOS is upper left corner
				sPos[1] = -Math.round(lPos[i][1] * RATIO) + KEYPOS[JINDEX][1] + KEYWIDTH / 2;
				screenPos.add(sPos);
				currKey.add(getKey(lPos[i]));
			}
		}
		
		public void setTap(boolean[] rTapData, boolean[] lTapData){
			assert rTapData.length == taps.length : "setTap() bad input!";
			System.arraycopy(rTapData, 0, taps, 0, FINGERNO);
			if (lTapData != null) System.arraycopy(lTapData, 0, taps, FINGERNO, FINGERNO);
			for (int i = 0; i < taps.length; i++){
				if (taps[i] == true){
					if (i == THUMB)
						System.out.print(" ");
					else
						System.out.print(getKey(worldPos.get(i)));
				}
			}
		}
		
		public void actionPerformed(ActionEvent e){
			repaint();
		}		
		
		public void paintComponent(Graphics g){
			super.paintComponent(g);
			Graphics2D g2d = (Graphics2D) g;
			g2d.setStroke(new BasicStroke(3.0f));
			for (int i = 0; i < KEYNO; i++){
				char[] c = new char[1];
				c[0] = KEYSEQ[i];
				g2d.setColor(Color.WHITE);
				if (currKey.contains(KEYSEQ[i])){
					g2d.setColor(Color.DARK_GRAY);
					g2d.fillRect(KEYPOS[i][0], KEYPOS[i][1], KEYWIDTH, KEYWIDTH);
				}
				else g2d.drawRect(KEYPOS[i][0], KEYPOS[i][1], KEYWIDTH, KEYWIDTH);
				g2d.setColor(Color.WHITE);				
				g2d.drawChars(c, 0, 1, KEYPOS[i][0] + KEYWIDTH / 4, KEYPOS[i][1] + KEYWIDTH / 4);
			}
			for (int i = 0; i < screenPos.size(); i++){
				g2d.setColor(taps[i]? Color.red : Color.GRAY);
				int[] pos = screenPos.get(i);
				g2d.fillOval(pos[0] - RADIUS, pos[1] - RADIUS, 2 * RADIUS, 2 * RADIUS);
			}
		}
		
	}

}
