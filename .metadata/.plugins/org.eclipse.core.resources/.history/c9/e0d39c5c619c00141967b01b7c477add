import javax.media.opengl.GL2;

/*
 * TODO: Initiation: Force initial yaw to be 0
 * TODO: Fix thumb
 * TODO: Develop a method to properly estimate angles of joints
 * TODO: Fix bug when pitch = 90 degrees
 * 
 * NOTE: Remember to apply rotations in order of ROLL, PITCH, YAW!
 * NOTE: Yaw in the counter clockwise direction is +ve
 */
public class Hand {
	private static final float THRESH = 0.5f; //Initialization threshold
	private static final float SCALE = 0.25f; //scales all dimensions
	private static final float[] ZERO3 = {0.0f, 0.0f, 0.0f};
	//Hard-coded angle offsets, probably a bad idea...
	public static final float[] ANGLEOFFSETS = {180.0f, 0.0f, 0.0f};
	
	//Right hand, in centimeters
	//P = Palm, T = Thumb, I = Index, M = Middle, R = Ring, L = Little
	private static final float[] ANGLEWEIGHTS = {0.0f, 1.0f, 0.4f};
	private static final float[] THUMBWEIGHTS = {1.3f, -0.3f, -0.3f};
	private static final float JOINTLENGTH = 0.1f * SCALE;
	private static final float HANDHEIGHT = 2.0f * SCALE;
	private static final float FINGERWIDTH = 2.0f * SCALE;
	private static final float[] PBASE = {0.0f * SCALE, 0.0f * SCALE, 0.0f * SCALE};
	private static final float[] PLENGTH = {11.0f * SCALE, 0.0f, 0.0f};
	private static final float PWIDTH = 10.0f * SCALE;
	//Lengths: 0 = proximal, 1 = intermediate, 2 = distal
	//Bases: 0 = x, 1 = y, 2 = z
	private static final float[] TBASE = {PWIDTH / 2, 0.0f, 0.0f}; //Note that PALMWIDTH is already scaled
	private static final float[] TLENGTH = {6.0f * SCALE, 4.0f * SCALE, 4.0f * SCALE};
	private static final float[] IBASE = {4.0f * SCALE, 0.0f, PLENGTH[0] + JOINTLENGTH};
	private static final float[] ILENGTH = {5.0f * SCALE, 2.5f * SCALE, 3.0f * SCALE};
	private static final float[] MBASE = {1.25f * SCALE, 0.0f, PLENGTH[0] + JOINTLENGTH};
	private static final float[] MLENGTH = {5.0f * SCALE, 3.0f * SCALE, 3.0f * SCALE};
	private static final float[] RBASE = {-1.25f * SCALE, 0.0f, PLENGTH[0] + JOINTLENGTH};
	private static final float[] RLENGTH = {5.0f * SCALE, 2.5f * SCALE, 3.0f * SCALE};
	private static final float[] LBASE = {-4.0f * SCALE, 0.0f, PLENGTH[0] + JOINTLENGTH};
	private static final float[] LLENGTH = {3.0f * SCALE, 2.0f * SCALE, 3.0f * SCALE};
	
	private static final int PALM = 0;
	private static final int THUMB = 1;
	private static final int INDEX = 2; 
	private static final int MIDDLE = 3;
	private static final int RING = 4;
	private static final int LITTLE = 5;
	private static final float[][] LENGTHS = {PLENGTH, TLENGTH, ILENGTH, MLENGTH, RLENGTH, LLENGTH};
	private static final float[][] BASES = {PBASE, TBASE, IBASE, MBASE, RBASE, LBASE};
	private static final float[] WIDTHS = {PWIDTH, FINGERWIDTH, FINGERWIDTH, FINGERWIDTH, FINGERWIDTH, FINGERWIDTH};
	
	Side side;
	private float[][] angles = new float[6][3];
	
	//WARNING: THIS IS NOT AN ARRAY COPY!!!!!!!!!!!!!!!
	private float[][] initAngles = new float[6][3];
	private boolean isInit = false;
	
	
	static enum Side {
		LEFT, 
		RIGHT
	}

	public boolean isInit(){
		return isInit;
	}
	
	//Converts angles from radians to degrees
	//DO NOT CHANGE ORDER (follows sensor ordering: roll, pitch, yaw)
	public void setRadAngles(float[] angles){
		assert angles.length % 3 == 0 : "setRadAngles() bad input!";
		for (int i = 0; i < angles.length; i++){
			angles[i] = radToDeg(angles[i]) + ANGLEOFFSETS[i % 3];
			this.angles[i / 3][i % 3] = angles[i];
		}
	}
	
	public void initRadAngles(Side side, float[] angles){
		assert isInit == false : "Re-initiation";
		assert angles.length % 3 == 0 : "initRadAngles() bad input!";
		this.side = side;
		isInit = true;
		
		for (int i = 0; i < angles.length; i++){
			angles[i] = radToDeg(angles[i]) + ANGLEOFFSETS[i % 3];
			if (Math.abs(angles[i] - initAngles[i / 3][i % 3]) > THRESH)
				isInit = false;
			initAngles[i / 3][i % 3] = angles[i];
		}	
	}
	
	public void drawHand(GL2 gl)
	{
		gl.glPushMatrix();
		
		
		if (side == Side.RIGHT){
			//draw palm
			drawPalm(gl);

			gl.glPushMatrix();
			//drawThumb(gl);
			gl.glPopMatrix();
			
			gl.glPushMatrix();
			drawIndex(gl);
			gl.glPopMatrix();
			
			gl.glPushMatrix();
			//drawFinger(gl, MBASE, mAngles, MLENGTHS, pAngles);
			gl.glPopMatrix();
			
			gl.glPushMatrix();
			//drawFinger(gl, RBASE, rAngles, RLENGTHS, pAngles);
			gl.glPopMatrix();
			
			gl.glPushMatrix();
			//drawFinger(gl, LBASE, lAngles, LLENGTHS, pAngles);
			gl.glPopMatrix();
		}
		
		gl.glPopMatrix();
	}
	
	/*
	 * TODO:
	private void drawThumb(GL2 gl){
		//System.out.println(angles[2]);
		gl.glTranslatef(TBASE[0], TBASE[1], TBASE[2]);
		gl.glRotatef(-pAngles[2] + tAngles[2] * 
				(tAngles[2] >= 0 ? THUMBWEIGHTS[0] : 1 - THUMBWEIGHTS[0]), 
				0, 1, 0); //Angle weights should be applied to yaw for thumb
		gl.glRotatef(-pAngles[1] + tAngles[1], 1, 0, 0);
		gl.glRotatef(-pAngles[0] + tAngles[0], 0, 0, 1);
		gl.glPushMatrix();
		gl.glScalef(FINGERWIDTH, HANDHEIGHT, TLENGTH[0]);
		Box.drawDefaultBox(gl);
		gl.glPopMatrix();
		gl.glTranslatef(0, 0, TLENGTH[0] + JOINTLENGTH);
		gl.glRotatef(tAngles[2] * 
				(tAngles[2] >= 0 ? THUMBWEIGHTS[1] : 1 - THUMBWEIGHTS[1]), 
				0, 1, 0);
		gl.glPushMatrix();
		gl.glScalef(FINGERWIDTH, HANDHEIGHT, TLENGTH[1]);
		Box.drawDefaultBox(gl);
		gl.glPopMatrix();
		gl.glTranslatef(0, 0, TLENGTH[1] + JOINTLENGTH);
		gl.glRotatef(tAngles[2] * 
				(tAngles[2] >= 0 ? THUMBWEIGHTS[2] : 1 - THUMBWEIGHTS[2]), 
				0, 1, 0);
		gl.glPushMatrix();
		gl.glScalef(FINGERWIDTH, HANDHEIGHT, TLENGTH[2]);
		Box.drawDefaultBox(gl);
		gl.glPopMatrix();
	}
	*/
	
	private void drawIndex(GL2 gl){
		//System.out.println(angles[INDEX][2] + " - " + initAngles[INDEX][2]);
		float[] offset = new float[3];
		System.arraycopy(angles[PALM], 0, offset, 0, angles[PALM].length);
		offset[2] = initAngles[INDEX][2];
		drawFinger(gl, INDEX, offset);
	}
	
	//TODO: Other drawFinger functions
	
	private void drawPalm(GL2 gl){
		//System.out.println(angles[PALM][2] + " - " + initAngles[PALM][2]);
		gl.glTranslatef(PBASE[0], PBASE[1], PBASE[2]);
		gl.glRotatef(angles[PALM][2] - initAngles[PALM][2], 0, 1, 0);
		gl.glRotatef(angles[PALM][1], 1, 0, 0);
		gl.glRotatef(angles[PALM][0], 0, 0, 1);
		gl.glPushMatrix();
		gl.glScalef(PWIDTH, HANDHEIGHT, PLENGTH[0]);
		Box.drawDefaultBox(gl);
		gl.glPopMatrix();
	}
	
	// base(x, y, z), angles(roll - offset[0], pitch - offset[1], yaw - offset[2])
	private void drawFinger(GL2 gl, int finger, float[] offset){
		assert offset.length == 3 : "drawFinger() bad input!";
		assert finger <= 5 : "drawFinger() bad input!";
		//assert finger != THUMB : "Use drawThumb() function!";

		gl.glTranslatef(BASES[finger][0], BASES[finger][1], BASES[finger][2]);
		gl.glRotatef(-offset[2] + angles[finger][2], 0, 1, 0);
		gl.glRotatef(-offset[1] + angles[finger][1] * ANGLEWEIGHTS[0], 1, 0, 0);
		//gl.glRotatef(-offset[0] + angles[0], 0, 0, 1); //Individual finger roll is unlikely
		gl.glPushMatrix();
		gl.glScalef(WIDTHS[finger], HANDHEIGHT, LENGTHS[finger][0]);
		Box.drawDefaultBox(gl);
		gl.glPopMatrix();
		
		if (LENGTHS[finger][1] == 0.0f) return;
		
		gl.glTranslatef(0, 0, LENGTHS[finger][0] + JOINTLENGTH);
		gl.glRotatef(angles[finger][1] * ANGLEWEIGHTS[1], 1, 0, 0);
		gl.glPushMatrix();
		gl.glScalef(WIDTHS[finger], HANDHEIGHT, LENGTHS[finger][1]);
		Box.drawDefaultBox(gl);
		gl.glPopMatrix();
		
		if (LENGTHS[finger][2] == 0.0f) return;
		
		gl.glTranslatef(0, 0, LENGTHS[finger][1] + JOINTLENGTH);
		gl.glRotatef(angles[finger][1] * ANGLEWEIGHTS[2], 1, 0, 0);
		gl.glPushMatrix();
		gl.glScalef(WIDTHS[finger], HANDHEIGHT, LENGTHS[finger][2]);
		Box.drawDefaultBox(gl);
		gl.glPopMatrix();
	}
	
	public float radToDeg(float rad){
		return (float) (rad  * 180.0f / Math.PI);
	}
}
